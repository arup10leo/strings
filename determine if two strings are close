class Solution {
public:
    bool closeStrings(string w1, string w2) {
        if(w1.size()!=w2.size()) return false;
        set<char>s1,s2;
        map<int,int>m1,m2;
        vector<int>v1,v2;
        for(int i=0;i<w1.size();i++){
            s1.insert(w1[i]);
            s2.insert(w2[i]);
            m1[w1[i]]++;
            m2[w2[i]]++;
        }
        for(auto it:m1){
            v1.push_back(it.second);
        }
        for(auto it:m2){
            v2.push_back(it.second);
        }
        sort(v1.begin(),v1.end());
        sort(v2.begin(),v2.end());
        if(v1==v2 and s1==s2) return 1;
        else return 0;
    }
};






class Solution {
public:
    bool closeStrings(string w1, string w2) {
        
        
        
        if(w1.length() != w2.length()){
            return false;
        }
        unordered_set<char>holder;
        vector<int> occurances1(26, 0), occurances2(26, 0);
        for(int i=0;i<w1.length();i++){
            holder.insert(w1[i]);
            occurances1[ (int)w1[i] - 97 ]++;
        }
        for(int i=0;i<w2.length();i++){
            holder.erase(w2[i]);
            occurances2[ (int)w2[i] - 97 ]++;
        }
        if(!holder.empty()){
            return false;
        }
        sort(occurances1.begin(), occurances1.end());
        sort(occurances2.begin(), occurances2.end());
        
        for(int i=0;i<26;i++){
            if(occurances1[i] != occurances2[i]){
                return false;
            }
        }
        return true;
    }
};
